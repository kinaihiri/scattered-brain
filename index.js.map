{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAAA,MAAQ,cAAe,QAAU,KAgBjC,IAAM,EAAa,WAGV,MAAA,uCAAuC,QAAQ,QAAS,SAAS,GAClE,IAAA,EAAqB,GAAhB,KAAK,SAAiB,EAExB,OADI,KAAL,EAAW,EAAS,EAAJ,EAAW,GACxB,SAAS,OAIhB,EAAU,WACV,GAAA,OAAO,cAAgB,OAAO,aAAa,KACtC,OAAA,OAAO,aAAa,KAEvB,IAAA,EAAO,IAIJ,OAHH,OAAO,eACT,OAAO,aAAa,KAAO,GAEtB,GAIX,OAAO,aAAe,SACpB,EACA,EACA,GAEM,IAAA,EAAgB,SAAC,GACjB,IAAA,EAAM,GAIH,OAHP,EAAiB,QAAQ,SAAS,GAChC,EAAI,GAAK,EAAM,UAAU,KAEpB,GAGL,EAAO,IACX,QAAQ,SAAS,QAAU,EAE3B,cAAc,kBACZ,CACE,QAAS,QAAQ,SAAS,QAC1B,SAAU,EACV,eAAe,GAEjB,SAAC,EAAO,GACF,EACF,QAAQ,IAAI,cAAe,IAE3B,QAAQ,IAAI,EAAS,MACrB,EAAmB,MAKnB,IAAA,EAAqB,SAAC,GAG1B,EAAM,GAAG,UAAW,SAAA,GAClB,cAAc,iBAAiB,CAC7B,UAAW,iBACX,KAAM,CAAE,QAAS,EAAG,MAAO,EAAc,IACzC,UAAW,IAAI,OAQjB,cAAc,iBAAiB,CAC7B,UAAW,kBAAoB,EAAE,QAAQ,OAAQ,KACjD,KAAM,CAAE,QAAS,EAAG,MAAO,EAAc,IACzC,UAAW,IAAI,OAEjB,QAAQ,IAAI,iBAAkB,KAKhC,EAAE,UAAU,GAAG,QAAS,UAAW,SAAA,GAMjC,QAAQ,IAAI,+BAAiC,EAAE,OAAO,UAAY,KAClE,cAAc,iBAAiB,CAC7B,UAAW,eACX,KAAM,CACJ,KAAM,EAAE,OAAO,UACf,MAAO,EAAc,IAEvB,UAAW,IAAI,OAGjB,cAAc,iBAAiB,CAC7B,UAAW,gBAAkB,EAAE,OAAO,UAAU,QAAQ,OAAQ,KAChE,KAAM,CACJ,KAAM,EAAE,OAAO,UACf,MAAO,EAAc,IAEvB,UAAW,IAAI,SAInB,OAAO,iBAAiB,eAAgB,SAAS,GAC/C,QAAQ,IAAI,uCAAyC,EAAM,SAC3D,cAAc,iBAAiB,CAC7B,UAAW,cACX,KAAM,CACJ,QAAS,EAAM,QACf,MAAO,EAAc,IAEvB,UAAW,IAAI","file":"index.js","sourceRoot":"..","sourcesContent":["mport { PlayFabClient, PlayFab } from \"playfab-sdk\";\n\ninterface HarloweState {\n  variables: { [key: string]: any };\n  on: (event: string, callback: (e: any) => void) => void;\n  passage: string;\n}\n\ninterface Window {\n  setupPlayfab: (\n    playfabID: string,\n    trackedVars: string[],\n    State: HarloweState\n  ) => void;\n}\n\nconst createGUID = (): string => {\n  //http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n  // via http://s3-us-west-2.amazonaws.com/api-playfab-com-craft-files/FileAssets/index.html\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nconst getGUID = () => {\n  if (window.localStorage && window.localStorage.GUID) {\n    return window.localStorage.GUID;\n  } else {\n    var guid = createGUID();\n    if (window.localStorage) {\n      window.localStorage.GUID = guid;\n    }\n    return guid;\n  }\n};\n\nwindow.setupPlayfab = (\n  playfabID: string,\n  trackedVariables: string[],\n  State: HarloweState\n) => {\n  const trackedValues = (trackedVariables: string[]) => {\n    let map = {};\n    trackedVariables.forEach(function(v) {\n      map[v] = State.variables[v];\n    });\n    return map;\n  };\n\n  var guid = getGUID();\n  PlayFab.settings.titleId = playfabID;\n\n  PlayFabClient.LoginWithCustomID(\n    {\n      TitleId: PlayFab.settings.titleId,\n      CustomId: guid,\n      CreateAccount: true\n    },\n    (error, response) => {\n      if (error) {\n        console.log(\"Login error\", error);\n      } else {\n        console.log(response.data);\n        setUpStateHandlers(trackedVariables);\n      }\n    }\n  );\n\n  const setUpStateHandlers = (trackedVariables: string[]) => {\n    // Tie into Harlowe's internal state tracking to log an analytics event whenever the current passage changes\n    // Warning: Harlowe has no official public API, so this might break in a future release.\n    State.on(\"forward\", e => {\n      PlayFabClient.WritePlayerEvent({\n        EventName: \"passage_loaded\",\n        Body: { Passage: e, State: trackedValues(trackedVariables) },\n        Timestamp: new Date()\n      });\n\n      // For data accessed via the API, it's good to have clean \"passage_loaded\" events that contain everything as metadata\n      // However, within PlayFab's analytics dashboard, we can't easily visualize the same event with different parameters.\n      //\n      // This sends a second set of passage_loaded events with unique names (e.g. \"passage_loaded_my_passage_name\").\n      // It's messy and clutters our event stream, but is still useful.\n      PlayFabClient.WritePlayerEvent({\n        EventName: \"passage_loaded_\" + e.replace(/\\W/gi, \"_\"),\n        Body: { Passage: e, State: trackedValues(trackedVariables) },\n        Timestamp: new Date()\n      });\n      console.log(\"History event!\", e);\n    });\n\n    // Because we're using this in context of Twine 2 + Harlowe,\n    // we can assume jQuery will already exist in the execution environment\n    $(document).on(\"click\", \"tw-link\", e => {\n      // Sometimes, it's helpful to track \"a link was clicked\" as distinct from \"a new passage was loaded\"\n      // This tracks events whenever the player clicks a Twine link.\n      // This might be e.g. a cycling link or a reveal link rather than something that triggers a passage transition.\n      // The \"Text\" tracked is the displayed text, not the passage name â€” use the passage_loaded events if that's what you want.\n\n      console.log(\"Tracking link click event: '\" + e.target.innerText + \"'\");\n      PlayFabClient.WritePlayerEvent({\n        EventName: \"link_clicked\",\n        Body: {\n          Text: e.target.innerText,\n          State: trackedValues(trackedVariables)\n        },\n        Timestamp: new Date()\n      });\n\n      PlayFabClient.WritePlayerEvent({\n        EventName: \"link_clicked_\" + e.target.innerText.replace(/\\W/gi, \"_\"),\n        Body: {\n          Text: e.target.innerText,\n          State: trackedValues(trackedVariables)\n        },\n        Timestamp: new Date()\n      });\n    });\n\n    window.addEventListener(\"beforeunload\", function(e) {\n      console.log(\"Tracking browser close with passage \" + State.passage);\n      PlayFabClient.WritePlayerEvent({\n        EventName: \"game_closed\",\n        Body: {\n          Passage: State.passage,\n          State: trackedValues(trackedVariables)\n        },\n        Timestamp: new Date()\n      });\n    });\n  };\n};\n"]}